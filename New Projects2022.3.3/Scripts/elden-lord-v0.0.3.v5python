{"mode":"Text","textContent":"#region VEXcode Generated Robot Configuration\nfrom vex import *\nimport urandom\n\n# Brain should be defined by default\nbrain=Brain()\n\n# Robot configuration code\nleft_arm_motor = Motor(Ports.PORT11, GearSetting.RATIO_18_1, False)\nright_arm_motor = Motor(Ports.PORT20, GearSetting.RATIO_18_1, True)\nclaw_motor = Motor(Ports.PORT15, GearSetting.RATIO_18_1, False)\n# vex-vision-config:begin\nvision_14__ORANGE_CONE = Signature(1, 8685, 9031, 8858,-1839, -1633, -1736,10, 0)\nvision_14 = Vision(Ports.PORT14, 50, vision_14__ORANGE_CONE)\n# vex-vision-config:end\n\n\n# wait for rotation sensor to fully initialize\nwait(30, MSEC)\n\n\n#endregion VEXcode Generated Robot Configuration\n\n# Robot configuration code\ncontroller_1 = Controller(PRIMARY)\nleft_drive_smart = Motor(Ports.PORT1, GearSetting.RATIO_18_1, False)\nright_drive_smart = Motor(Ports.PORT10, GearSetting.RATIO_18_1, True)\ndrivetrain = DriveTrain(left_drive_smart, right_drive_smart, 319.19, 295, 40, MM, 1)\n\n\n# wait for rotation sensor to fully initialize\nwait(30, MSEC)\n\n# define variables used for controlling motors based on controller inputs\ndrivetrain_needs_to_be_stopped_controller_1 = False\n\n# define a task that will handle monitoring inputs from controller_1\ndef rc_auto_loop_function_controller_1():\n    global drivetrain_needs_to_be_stopped_controller_1, remote_control_code_enabled\n    # process the controller input every 20 milliseconds\n    # update the motors based on the input values\n    while True:\n        if remote_control_code_enabled:\n            # calculate the drivetrain motor velocities from the controller joystick axies\n            # left = axis3 + axis4\n            # right = axis3 - axis4\n            drivetrain_left_side_speed = controller_1.axis3.position() * (driveSpeed/100) + controller_1.axis4.position() * (driveSpeed/100)\n            drivetrain_right_side_speed = controller_1.axis3.position() * (driveSpeed/100) - controller_1.axis4.position() * (driveSpeed/100)\n            \n            # check if the values are inside of the deadband range\n            if abs(drivetrain_left_side_speed) < 5 and abs(drivetrain_right_side_speed) < 5:\n                # check if the motors have already been stopped\n                if drivetrain_needs_to_be_stopped_controller_1:\n                    # stop the drive motors\n                    left_drive_smart.stop()\n                    right_drive_smart.stop()\n                    # tell the code that the motors have been stopped\n                    drivetrain_needs_to_be_stopped_controller_1 = False\n            else:\n                # reset the toggle so that the deadband code knows to stop the motors next\n                # time the input is in the deadband range\n                drivetrain_needs_to_be_stopped_controller_1 = True\n            \n            # only tell the left drive motor to spin if the values are not in the deadband range\n            if drivetrain_needs_to_be_stopped_controller_1:\n                left_drive_smart.set_velocity(drivetrain_left_side_speed, PERCENT)\n                left_drive_smart.spin(FORWARD)\n            # only tell the right drive motor to spin if the values are not in the deadband range\n            if drivetrain_needs_to_be_stopped_controller_1:\n                right_drive_smart.set_velocity(drivetrain_right_side_speed, PERCENT)\n                right_drive_smart.spin(FORWARD)\n        # wait before repeating the process\n        wait(20, MSEC)\n\n# define variable for remote controller enable/disable\nremote_control_code_enabled = True\nrc_auto_loop_thread_controller_1 = Thread(rc_auto_loop_function_controller_1)\n\nvexcode_console_precision = 0\nvexcode_controller_1_precision = 0\nmyVariable = 0\ndriveSpeed = 0\nmaxSpeed = 150\narmStep = 60\n\ndef when_started1():\n    global myVariable, driveSpeed, vexcode_brain_precision, vexcode_console_precision, vexcode_controller_1_precision\n    drivetrain.set_turn_velocity(75, PERCENT)\n    driveSpeed = 50\n    drivetrain.set_drive_velocity(driveSpeed, PERCENT)\n    drivetrain_left_side_speed = controller_1.axis3.position() * (driveSpeed/100) + controller_1.axis4.position() * (driveSpeed/100)\n    drivetrain_right_side_speed = controller_1.axis3.position() * (driveSpeed/100) - controller_1.axis4.position() * (driveSpeed/100)\n\n    left_arm_motor.set_velocity(7,PERCENT)\n    right_arm_motor.set_velocity(7,PERCENT)\n    left_arm_motor.set_stopping(HOLD)\n    right_arm_motor.set_stopping(HOLD)\n    # left_arm_motor.spin(REVERSE)\n    # right_arm_motor.spin(REVERSE)\n    # wait(0.6, SECONDS)\n    left_arm_motor.stop()\n    right_arm_motor.stop()\n\n    claw_motor.set_velocity(12,PERCENT)\n    claw_motor.set_stopping(HOLD)\n    claw_motor.stop()\n    \n    brain.screen.set_cursor(1, 1)\n    brain.screen.print(\"Become the Elden Lord!!!\")\n    brain.screen.next_row()\n\n    while True:\n        #arm control\n        if controller_1.buttonB.pressing():\n            arm_down()\n            pass\n        elif controller_1.buttonA.pressing():\n            arm_up()\n            pass\n        else:\n            arm_stop()\n            pass\n\n        #claw control\n        if controller_1.buttonL1.pressing():\n            claw_open()\n            pass\n        elif controller_1.buttonL2.pressing():\n            claw_close()\n            pass\n        else:\n            claw_motor.stop()\n            pass\n\ndef arm_up():\n    left_arm_motor.spin(FORWARD)\n    right_arm_motor.spin(FORWARD)\n\ndef arm_down():\n    left_arm_motor.spin(REVERSE)\n    right_arm_motor.spin(REVERSE)\n\ndef arm_stop():\n    left_arm_motor.stop()\n    right_arm_motor.stop()\n\ndef claw_open():\n    claw_motor.spin(FORWARD)\n\ndef claw_close():\n    claw_motor.spin(REVERSE)\n\ndef move(direction, speed):\n    left_drive_smart.set_velocity(speed,PERCENT)\n    right_drive_smart.set_velocity(speed,PERCENT)\n    if direction == \"left\" or direction == \"l\" or direction == \"L\":\n        left_drive_smart.spin(REVERSE)\n        right_drive_smart.spin(FORWARD)\n    elif direction == \"right\" or direction == \"r\" or direction == \"R\":\n        left_drive_smart.spin(FORWARD)\n        right_drive_smart.spin(REVERSE)\n\ndef auto_start():\n    visionCenterX = 160;\n    visionCenterY = 100;\n    remote_control_code_enabled = False\n    vision_14.take_snapshot(vision_14__ORANGE_CONE)\n\n    if vision_14.largest_object() != None:\n        goal_x = vision_14.largest_object().centerX\n        goal_y = vision_14.largest_object().centerY\n\n        if goal_x < visionCenterX-10:\n            move(\"right\",10)\n\n    \n\n\ndef onevent_controller_1buttonR1_pressed_0():\n    global myVariable, driveSpeed, vexcode_brain_precision, vexcode_console_precision, vexcode_controller_1_precision\n    drivetrain.turn_for(RIGHT, 230/50*75+45+10, DEGREES, wait=True)\n\ndef onevent_controller_1buttonUp_pressed_0():\n    global myVariable, driveSpeed, vexcode_brain_precision, vexcode_console_precision, vexcode_controller_1_precision\n    driveSpeed = driveSpeed + 10\n    if driveSpeed > maxSpeed:\n        driveSpeed = maxSpeed\n    drivetrain.set_drive_velocity(driveSpeed, PERCENT)\n\ndef onevent_controller_1buttonDown_pressed_0():\n    global myVariable, driveSpeed, vexcode_brain_precision, vexcode_console_precision, vexcode_controller_1_precision\n    driveSpeed = driveSpeed + -10\n    if driveSpeed < 0:\n        driveSpeed = 0\n    drivetrain.set_drive_velocity(driveSpeed, PERCENT)\n\ndef onevent_controller_1buttonX_pressed_0():\n    global myVariable, driveSpeed, vexcode_brain_precision, vexcode_console_precision, vexcode_controller_1_precision\n    driveSpeed = 50\n    drivetrain.set_drive_velocity(driveSpeed, PERCENT)\n\n# def onevent_controller_1buttonB_pressed_0():\n#     global myVariable, driveSpeed, vexcode_brain_precision, vexcode_console_precision, vexcode_controller_1_precision\n#     left_arm_motor.spin(REVERSE)\n#     right_arm_motor.spin(REVERSE)\n#     wait(0.6,SECONDS)\n#     left_arm_motor.stop()\n#     right_arm_motor.stop()\n\n# def onevent_controller_1buttonA_pressed_0():\n#     global myVariable, driveSpeed, vexcode_brain_precision, vexcode_console_precision, vexcode_controller_1_precision\n#     left_arm_motor.spin(FORWARD)\n#     right_arm_motor.spin(FORWARD)\n#     wait(0.6,SECONDS)\n#     left_arm_motor.stop()\n#     right_arm_motor.stop()\n\n# def onevent_controller_1buttonB_released_0():\n#     global myVariable, driveSpeed, vexcode_brain_precision, vexcode_console_precision, vexcode_controller_1_precision\n    \n#     left_arm_motor.stop()\n#     right_arm_motor.stop()\n\n# def onevent_controller_1buttonA_released_0():\n#     global myVariable, driveSpeed, vexcode_brain_precision, vexcode_console_precision, vexcode_controller_1_precision\n    \n#     left_arm_motor.stop()\n#     right_arm_motor.stop()\n\n# system event handlers\ncontroller_1.buttonR1.pressed(onevent_controller_1buttonR1_pressed_0)\ncontroller_1.buttonUp.pressed(onevent_controller_1buttonUp_pressed_0)\ncontroller_1.buttonDown.pressed(onevent_controller_1buttonDown_pressed_0)\ncontroller_1.buttonX.pressed(onevent_controller_1buttonX_pressed_0)\n# controller_1.buttonA.pressed(onevent_controller_1buttonA_pressed_0)\n# controller_1.buttonB.pressed(onevent_controller_1buttonB_pressed_0)\n# controller_1.buttonA.released(onevent_controller_1buttonA_released_0)\n# controller_1.buttonB.released(onevent_controller_1buttonB_released_0)\n# add 15ms delay to make sure events are registered correctly.\nwait(15, MSEC)\n\nwhen_started1()\n","textLanguage":"python","rconfig":[{"port":[11],"name":"left_arm_motor","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"正","rev":"反","gear":"ratio18_1"},"triportSourcePort":22},{"port":[20],"name":"right_arm_motor","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"true","fwd":"正","rev":"反","gear":"ratio18_1"},"triportSourcePort":22},{"port":[15],"name":"claw_motor","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"正","rev":"反","gear":"ratio18_1"},"triportSourcePort":22},{"port":[14],"name":"vision_14","customName":false,"deviceType":"Vision","deviceClass":"vision","setting":{"config":"{\"config\":{\"brightness\":50,\"signatures\":[{\"name\":\"ORANGE_CONE\",\"parameters\":{\"uMin\":8685,\"uMax\":9031,\"uMean\":8858,\"vMin\":-1839,\"vMax\":-1633,\"vMean\":-1736,\"rgb\":9783610.848484848,\"type\":0,\"name\":\"ORANGE_CONE\"},\"range\":10},{\"name\":\"SIG_2\",\"parameters\":{\"uMin\":0,\"uMax\":0,\"uMean\":0,\"vMin\":0,\"vMax\":0,\"vMean\":0,\"rgb\":0,\"type\":0,\"name\":\"SIG_2\"},\"range\":2.5},{\"name\":\"SIG_3\",\"parameters\":{\"uMin\":0,\"uMax\":0,\"uMean\":0,\"vMin\":0,\"vMax\":0,\"vMean\":0,\"rgb\":0,\"type\":0,\"name\":\"SIG_3\"},\"range\":2.5},{\"name\":\"SIG_4\",\"parameters\":{\"uMin\":0,\"uMax\":0,\"uMean\":0,\"vMin\":0,\"vMax\":0,\"vMean\":0,\"rgb\":0,\"type\":0,\"name\":\"SIG_4\"},\"range\":2.5},{\"name\":\"SIG_5\",\"parameters\":{\"uMin\":0,\"uMax\":0,\"uMean\":0,\"vMin\":0,\"vMax\":0,\"vMean\":0,\"rgb\":0,\"type\":0,\"name\":\"SIG_5\"},\"range\":2.5},{\"name\":\"SIG_6\",\"parameters\":{\"uMin\":0,\"uMax\":0,\"uMean\":0,\"vMin\":0,\"vMax\":0,\"vMean\":0,\"rgb\":0,\"type\":0,\"name\":\"SIG_6\"},\"range\":2.5},{\"name\":\"SIG_7\",\"parameters\":{\"uMin\":0,\"uMax\":0,\"uMean\":0,\"vMin\":0,\"vMax\":0,\"vMean\":0,\"rgb\":0,\"type\":0,\"name\":\"SIG_7\"},\"range\":2.5}],\"codes\":[]}}","isConfigured":"false"},"triportSourcePort":22}],"slot":0,"platform":"V5","sdkVersion":"20220215.18.00.00","appVersion":"2.3.1","fileFormat":"1.0.1","icon":"","targetBrainGen":"First","target":"Physical"}